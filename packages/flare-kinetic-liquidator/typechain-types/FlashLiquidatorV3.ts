/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace FlashLiquidatorV3 {
  export type ParamsStruct = {
    borrower: AddressLike;
    kTokenDebt: AddressLike;
    debtToken: AddressLike;
    kTokenColl: AddressLike;
    collUnderlying: AddressLike;
    flashToken: AddressLike;
    repayAmount: BigNumberish;
    fee: BigNumberish;
    minProfit: BigNumberish;
    minOutDebtSwap: BigNumberish;
    minOutCollSwap: BigNumberish;
  };

  export type ParamsStructOutput = [
    borrower: string,
    kTokenDebt: string,
    debtToken: string,
    kTokenColl: string,
    collUnderlying: string,
    flashToken: string,
    repayAmount: bigint,
    fee: bigint,
    minProfit: bigint,
    minOutDebtSwap: bigint,
    minOutCollSwap: bigint
  ] & {
    borrower: string;
    kTokenDebt: string;
    debtToken: string;
    kTokenColl: string;
    collUnderlying: string;
    flashToken: string;
    repayAmount: bigint;
    fee: bigint;
    minProfit: bigint;
    minOutDebtSwap: bigint;
    minOutCollSwap: bigint;
  };
}

export interface FlashLiquidatorV3Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "beneficiary"
      | "factoryV3"
      | "liquidateWithFlash"
      | "router"
      | "uniswapV3FlashCallback"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "beneficiary",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "factoryV3", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "liquidateWithFlash",
    values: [AddressLike, FlashLiquidatorV3.ParamsStruct]
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "uniswapV3FlashCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "beneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factoryV3", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidateWithFlash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3FlashCallback",
    data: BytesLike
  ): Result;
}

export interface FlashLiquidatorV3 extends BaseContract {
  connect(runner?: ContractRunner | null): FlashLiquidatorV3;
  waitForDeployment(): Promise<this>;

  interface: FlashLiquidatorV3Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  beneficiary: TypedContractMethod<[], [string], "view">;

  factoryV3: TypedContractMethod<[], [string], "view">;

  liquidateWithFlash: TypedContractMethod<
    [pool: AddressLike, p: FlashLiquidatorV3.ParamsStruct],
    [void],
    "nonpayable"
  >;

  router: TypedContractMethod<[], [string], "view">;

  uniswapV3FlashCallback: TypedContractMethod<
    [fee0: BigNumberish, fee1: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "beneficiary"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "factoryV3"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "liquidateWithFlash"
  ): TypedContractMethod<
    [pool: AddressLike, p: FlashLiquidatorV3.ParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "router"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "uniswapV3FlashCallback"
  ): TypedContractMethod<
    [fee0: BigNumberish, fee1: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  filters: {};
}
